<#@ template debug="true" hostspecific="true" language="C#"#>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="EnvDTE" #>

<#@ import namespace="System.Reflection" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string solutionPath = ((this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE).Solution.FullName; 
var locationsDictionary = new Dictionary<string, GameLocationJsonData>();
foreach (var directory in Directory.GetDirectories($@"{solutionPath}/../RPIG/Assets/Locations/"))
{
	var directoryInfo = new DirectoryInfo(directory);
	var files = directoryInfo.GetFiles();

	var jsonFile = files.FirstOrDefault(f => f.Extension == ".json")
		?? throw new Exception("Не найден файл по расширению - json");

	var jsonText = File.ReadAllText(jsonFile.FullName);

	var locationJsonData = JsonConvert.DeserializeObject<GameLocationJsonData>(jsonText);

	var htmlFile = files.FirstOrDefault(f => f.Name == locationJsonData.HtmlText)
		?? throw new Exception($"Не найден файл по расширению - {locationJsonData.HtmlText}");

	var cssFile = files.FirstOrDefault(f => f.Name == locationJsonData.CssText)
		?? throw new Exception($"Не найден файл по расширению - {locationJsonData.CssText}");

	locationJsonData.HtmlText = File.ReadAllText(htmlFile.FullName);
	locationJsonData.CssText = File.ReadAllText(cssFile.FullName);

	locationsDictionary.Add(directoryInfo.Name, locationJsonData);
}


#>
using RPIG.Engine;
using RPIG.States;
using System.Collections.Generic;

public static partial class LocationLoader
{
	public static Dictionary<string, GameLocation> Load() 
	{
		var locations = new Dictionary<string, GameLocation>();

		<# foreach(var locationData in locationsDictionary)
		{#>
			var locationKey = "<#=locationData.Key #>";
			locations.Add
				(
					locationKey,
					new GameLocation (
					@"<#=locationData.Value.HtmlText#>",
					@"<#=locationData.Value.CssText#>",
					<#=string.Join(", ", locationData.Value.ButtonFunctions.Select(bf => bf.ToString()).ToArray())#>)
				);
		<#}#>

		return locations;
	}
}

<#+
public class GameLocationJsonData
{
	public string HtmlText { get; set; }
	public string CssText { get; set; }
	public List<ButtonFunctionJsonData> ButtonFunctions { get; }
	[JsonConstructor]
	public GameLocationJsonData(string htmlText, string cssText, List<ButtonFunctionJsonData> buttonFunctions)
	{
		HtmlText = htmlText;
		CssText = cssText;
		ButtonFunctions = buttonFunctions;
	}
}

public class ButtonFunctionJsonData
{
	public string Text { get; set; }
	public string Transit { get; set; }
	public string IsHide { get; set; }
	public string IsActive { get; set; }
	[JsonConstructor]
	public ButtonFunctionJsonData(string text, string transit, string isHide, string isActive)
	{
		Text = text;
		Transit = transit;
		IsHide = isHide;
		IsActive = isActive;
	}

	public override string ToString()
		=> $"new ButtonFunc(\"{Text}\", {Transit}, {IsHide}, {IsActive})";
}
#>