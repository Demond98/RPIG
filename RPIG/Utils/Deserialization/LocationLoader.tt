<#@ template debug="false" hostspecific="true" language="C#"#>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ output extension=".cs" #>

using RPIG.Engine;
using RPIG.States;
using System.Collections.Generic;

public static partial class LocationLoader
{
	public static Dictionary<string, GameLocation> Load() 
	{
		var locations = new Dictionary<string, GameLocation>();

<#
string solutionPath = ((this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE).Solution.FullName; 

foreach (var directory in Directory.GetDirectories($@"{solutionPath}/../RPIG/Assets/Locations/"))
{
	var directoryInfo = new DirectoryInfo(directory);
	var files = directoryInfo.GetFiles();

	var htmlFile = files.First(f => f.Extension == ".html");
	var cssFile = files.First(f => f.Extension == ".css");

	var htmlText = File.ReadAllText(htmlFile.FullName);
	var cssText = File.ReadAllText(cssFile.FullName);
#>
	locations.Add(
		"<#=directoryInfo.Name #>",
		new GameLocation (
			@"<#= htmlText #>",
			@"<#= cssText  #>")
	);
<#
}
#>
	return locations;

	}
}